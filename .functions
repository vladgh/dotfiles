### Functions #################################################################

## Logging stuff.
function e_header() { echo -e "\n\033[1m$@\033[0m"; }
function e_ok()     { echo -e "  \033[1;32m✔\033[0m  $@"; }
function e_error()  { echo -e "  \033[1;31m✖\033[0m  $@"; }
function e_warn()   { echo -e "  \033[1;33m  $@\033[0m"; }
function e_arrow()  { echo -e "  \033[0;34m➜\033[0m  $@"; }
function e_footer() { echo -e "\n\033[1m$@\033[0m\n"; }

# $1 => error message, $2 => exit code
function e_abort()   { e_error $1; exit $2; }

## OS detection
is_osx()    { [[ $(uname) == Darwin ]] || return 1; }
is_linux()  { [[ $(uname) == Linux ]] || return 1; }
is_ubuntu() { [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]] || return 1; }

# Start an HTTP server from a directory, optionally specifying the port
server() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

#Extract most know archives with one command
extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
       esac
   else
       echo "'$1' is not a valid file"
   fi
}

# Make a directory and jump directly into it
mcd() { mkdir -p "$1" && cd "$1" ;}

## VMware
vmware_install() {
  (
    cd `mktemp -d`
    sudo apt-get --quiet --yes install build-essential linux-headers-$(uname -r)
    tar zxvf /media/$(whoami)/"VMware Tools"/VMwareTools-*.tar.gz
    sudo ./vmware-tools-distrib/vmware-install.pl -d
  )
}
vmware_refresh() { sudo vmware-config-tools.pl -d ;}

# DOTFILES
# Create links for dotfiles
link_dotfiles(){
  [[ -n $@ ]] || return 1

  e_header 'Symlinks'
  bakdir="$HOME/dotfiles.bak/$(date "+%Y_%m_%d-%H_%M_%S")"
  mkdir -p $bakdir && e_ok "Backups will be saved in '$bakdir'\n"

  (
  cd $HOME
  for dotfile in $@; do
    dot=$(basename $dotfile)
    old=${HOME}/${dot}

    if [[ -s $old ]]; then # IF old file exists
      if [[ -L $old ]]; then # Replace if old file is a symlink
        rm $old && \
          ln -sfn $dotfile $old && \
          e_ok "Replaced link for $old to $dotfile"
      else # Backup old file if it's not a symlink
        mv $old $bakdir && \
          e_ok "$old saved at $bakdir"
        ln -s $dotfile $old && \
          e_ok "Linked $old to $dotfile"
      fi
    else # Create symlink if the oldfile doesn't exist
      ln -sfn $dotfile $old && \
        e_ok "Linked $old to $dotfile"
    fi
  done
  )
}

# vim: ft=sh
