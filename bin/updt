#!/usr/bin/env bash

## Update

COMMAND=$1
AVAILABLE='
  all
  ubuntu
  brew
  vim
  aws
  ruby
  cola
  docker_images
'

. ~/.functions

updt_ubuntu() {
  is_ubuntu || return
  sudo apt-get --quiet --yes update
  sudo apt-get --quiet --yes upgrade
}

updt_brew() {
  is_osx || return
  brew doctor
  brew update
  brew upgrade
  brew cleanup
}

updt_vim() {
  (
    [[ -d ${HOME}/.vim ]] && cd ${HOME}/.vim || return
    curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
    # TODO Parallel git submodule foreach "(git fetch && git reset --hard origin/master) &"
    git submodule foreach --recursive "git fetch && git reset --hard origin/master"
  )
}

updt_ruby() {
  env | grep -q ^rvm_version= || return
  rvm get stable
  gem update --system
  gem update
}

updt_cola() {
  is_linux || return
  (
    COLADIR="${HOME}/git-cola"
    if [ -d $COLADIR ]; then
      cd $COLADIR && git remote update
      if [ $(git rev-parse HEAD) != $(git rev-parse @{u}) ]; then
        git reset --hard origin/master
      fi
    else
      cd $HOME && git clone git://github.com/git-cola/git-cola.git
    fi
  )
}

updt_docker_images() {
  which docker > /dev/null || return
  for img in $(docker images 2>/dev/null | awk '$0 !~ /<none>/ {print $1":"$2}' | tail -n +2 | sort -u); do
    docker pull $img
  done
}

updt_aws() {
  sudo pip install --upgrade awscli
}

updt_all() {
  for cmd in $AVAILABLE; do
    [[ "$cmd" != 'all' ]] && updt_$cmd
  done
}

if [[ "$AVAILABLE" =~ "$COMMAND" ]]; then
  updt_$COMMAND
else
  e_abort "$COMMAND is not valid. Available commands are: $AVAILABLE"
fi
